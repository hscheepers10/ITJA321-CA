Test Collection

 1  import java.util.*;
  2  
  3  public class TestCollection {
  4    public static void main(String[] args) {
  5      ArrayList<String> collection1 = new ArrayList<>();
  6      collection1.add("New York"); 
  7      collection1.add("Atlanta"); 
  8      collection1.add("Dallas"); 
  9      collection1.add("Madison"); 
 10  
 11      System.out.println("A list of cities in collection1:");
 12      System.out.println(collection1);
 13  
 14      System.out.println("\nIs Dallas in collection1? "
 15        + collection1.contains("Dallas"));
 16  
 17      collection1.remove("Dallas");
 18      System.out.println("\n" + collection1.size() + 
 19         " cities are in collection1 now");
 20  
 21      Collection<String> collection2 = new ArrayList<>();
 22      collection2.add("Seattle"); 
 23      collection2.add("Portland"); 
 24      collection2.add("Los Angles"); 
 25      collection2.add("Atlanta"); 
 26  
 27      System.out.println("\nA list of cities in collection2:");
 28      System.out.println(collection2);
 29  
 30      ArrayList<String> c1 = (ArrayList<String>)(collection1.clone());
 31      c1.addAll(collection2);
 32      System.out.println("\nCities in collection1 or collection2: ");
 33      System.out.println(c1);
 34  
 35      c1 = (ArrayList<String>)(collection1.clone());
 36      c1.retainAll(collection2);
 37      System.out.print("\nCities in collection1 and collection2: ");
 38      System.out.println(c1);
 39  
 40      c1 = (ArrayList<String>)(collection1.clone());
 41      c1.removeAll(collection2);
 42      System.out.print("\nCities in collection1, but not in 2: ");
 43      System.out.println(c1);
 44    }
 45  }

END END END END END


TEST ITERATOR

1  import java.util.*;
  2  
  3  public class TestIterator {
  4    public static void main(String[] args) {
  5      Collection<String> collection = new ArrayList<>();
  6      collection.add("New York"); 
  7      collection.add("Atlanta"); 
  8      collection.add("Dallas"); 
  9      collection.add("Madison"); 
 10  
 11      Iterator<String> iterator = collection.iterator();
 12      while (iterator.hasNext()) {
 13        System.out.print(iterator.next().toUpperCase() + " ");
 14      }
 15      System.out.println();
 16    }
 17  }

END END END

TEST ArrayList AND Linked List

1  import java.util.*;
  2  
  3  public class TestArrayAndLinkedList {
  4    public static void main(String[] args) {
  5      List<Integer> arrayList = new ArrayList<>();
  6      arrayList.add(1); // 1 is autoboxed to new Integer(1)
  7      arrayList.add(2);
  8      arrayList.add(3);
  9      arrayList.add(1);
 10      arrayList.add(4);
 11      arrayList.add(0, 10);
 12      arrayList.add(3, 30);
 13  
 14      System.out.println("A list of integers in the array list:");
 15      System.out.println(arrayList);
 16  
 17      LinkedList<Object> linkedList = new LinkedList<>(arrayList);
 18      linkedList.add(1, "red");
 19      linkedList.removeLast();
 20      linkedList.addFirst("green");
 21  
 22      System.out.println("Display the linked list backward:"); 
 23      ListIterator<Object> listIterator = linkedList.listIterator();
 24      while (listIterator.hasNext()) {
 25        System.out.print(listIterator.next() + " ");
 26      }
 27      System.out.println();
 28    
 29      System.out.println("Display the linked list backward:");
 30      listIterator = linkedList.listIterator(linkedList.size());
 31      while (listIterator.hasPrevious()) {
 32        System.out.print(listIterator.previous() + " ");
 33      }
 34    }

END END END

Geometric Object Comparator 

1  import java.util.Comparator;
  2  
  3  public class GeometricObjectComparator
  4      implements Comparator<GeometricObject>, java.io.Serializable {
  5    public int compare(GeometricObject o1, GeometricObject o2) {
  6      double area1 = o1.getArea();
  7      double area2 = o2.getArea();
  8  
  9      if (area1 < area2)
 10        return -1;
 11      else if (area1 == area2)
 12        return 0;
 13      else
 14        return 1;
 15    }
 16  }
 35  } 

END END END 

Test Comparator

1  import java.util.Comparator;
  2  
  3  public class TestComparator {
  4    public static void main(String[] args) {
  5      GeometricObject g1 = new Rectangle(5, 5);
  6      GeometricObject g2 = new Circle(5);
  7  
  8      GeometricObject g = 
  9        max(g1, g2, new GeometricObjectComparator());
 10      
 11      System.out.println("The area of the larger object is " + 
 12        g.getArea());
 13    }
 14    
 15    public static GeometricObject max(GeometricObject g1, 
 16        GeometricObject g2, Comparator<GeometricObject> c) {
 17      if (c.compare(g1, g2) > 0)
 18        return g1;
 19      else
 20        return g2;
 21    }

END END END

Sort Strings By Length

1  public class SortStringByLength {
  2    public static void main(String[] args) {
  3      String[] cities = {"Atlanta", "Savannah", "New York", "Dallas"};
  4      java.util.Arrays.sort(cities, new MyComparator());
  5  
  6      for (String s : cities) {
  7        System.out.print(s + " ");
  8      }
  9    }
 10  
 11    public static class MyComparator implements
 12        java.util.Comparator<String> {
 13      @Override
 14      public int compare(String s1, String s2) {
 15        return s1.length() - s2.length();
 16      }
 17    }
 18  }
END END END

Sort String IgnoreCase

1  public class SortStringIgnoreCase {
  2    public static void main(String[] args) {
  3      java.util.List<String> cities = java.util.Arrays.asList
  4        ("Atlanta", "Savannah", "new York", "dallas");
  5      cities.sort((s1, s2) -> s1.compareToIgnoreCase(s2));
  6  
  7      for (String s: cities) {
  8        System.out.print(s + " ");
  9      }
 10    }


END END END 

Multiple Bounce Ball

1  import javafx.animation.KeyFrame;
  2  import javafx.animation.Timeline;
  3  import javafx.application.Application;
  4  import javafx.beans.property.DoubleProperty;
  5  import javafx.geometry.Pos;
  6  import javafx.scene.Node;
  7  import javafx.stage.Stage;
  8  import javafx.scene.Scene;
  9  import javafx.scene.control.Button;
 10  import javafx.scene.control.ScrollBar;
 11  import javafx.scene.layout.BorderPane;
 12  import javafx.scene.layout.HBox;
 13  import javafx.scene.layout.Pane;
 14  import javafx.scene.paint.Color;
 15  import javafx.scene.shape.Circle;
 16  import javafx.util.Duration;
 17  
 18  public class MultipleBounceBall extends Application {
 19    @Override // Override the start method in the Application class
 20    public void start(Stage primaryStage) {
 21      MultipleBallPane ballPane = new MultipleBallPane();
 22      ballPane.setStyle("-fx-border-color: yellow");
 23  
 24      Button btAdd = new Button("+");
 25      Button btSubtract = new Button("-");
 26      HBox hBox = new HBox(10);
 27      hBox.getChildren().addAll(btAdd, btSubtract);
 28      hBox.setAlignment(Pos.CENTER);
 29  
 30      // Add or remove a ball
 31      btAdd.setOnAction(e -> ballPane.add());
 32      btSubtract.setOnAction(e -> ballPane.subtract());
 33  
 34      // Pause and resume animation
 35      ballPane.setOnMousePressed(e -> ballPane.pause());
 36      ballPane.setOnMouseReleased(e -> ballPane.play());
 37  
 38      // Use a scroll bar to control animation speed
 39      ScrollBar sbSpeed = new ScrollBar();
 40      sbSpeed.setMax(20);
 41      sbSpeed.setValue(10);
 42      ballPane.rateProperty().bind(sbSpeed.valueProperty());
 43      
 44      BorderPane pane = new BorderPane();
 45      pane.setCenter(ballPane);
 46      pane.setTop(sbSpeed);
 47      pane.setBottom(hBox);
 48  
 49      // Create a scene and place the pane in the stage
 50      Scene scene = new Scene(pane, 250, 150);
 51      primaryStage.setTitle("MultipleBounceBall"); // Set the stage title
 52      primaryStage.setScene(scene); // Place the scene in the stage
 53      primaryStage.show(); // Display the stage
 54    }
 55  
 56    private class MultipleBallPane extends Pane {
 57      private Timeline animation;
 58  
 59      public MultipleBallPane() {
 60        // Create an animation for moving the ball
 61        animation = new Timeline(
 62          new KeyFrame(Duration.millis(50), e -> moveBall()));
 63        animation.setCycleCount(Timeline.INDEFINITE);
 64        animation.play(); // Start animation
 65      }
 66  
 67      public void add() {
 68        Color color = new Color(Math.random(), 
 69          Math.random(), Math.random(), 0.5);
 70        getChildren().add(new Ball(30, 30, 20, color)); 
 71      }
 72      
 73      public void subtract() {
 74        if (getChildren().size() > 0) {
 75          getChildren().remove(getChildren().size() - 1); 
 76        }
 77      }
 78  
 79      public void play() {
 80        animation.play();
 81      }
 82  
 83      public void pause() {
 84        animation.pause();
 85      }
 86  
 87      public void increaseSpeed() {
 88        animation.setRate(animation.getRate() + 0.1);
 89      }
 90  
 91      public void decreaseSpeed() {
 92        animation.setRate(
 93          animation.getRate() > 0 ? animation.getRate() - 0.1 : 0);
 94      }
 95  
 96      public DoubleProperty rateProperty() {
 97        return animation.rateProperty();
 98      }
 99  
100      protected void moveBall() {
101        for (Node node: this.getChildren()) {
102          Ball ball = (Ball)node;
103          // Check boundaries
104          if (ball.getCenterX() < ball.getRadius() || 
105              ball.getCenterX() > getWidth() - ball.getRadius()) {
106            ball.dx *= -1; // Change ball move direction
107          }
108          if (ball.getCenterY() < ball.getRadius() || 
109              ball.getCenterY() > getHeight() - ball.getRadius()) {
110            ball.dy *= -1; // Change ball move direction
111          }
112  
113          // Adjust ball position
114          ball.setCenterX(ball.dx + ball.getCenterX());
115          ball.setCenterY(ball.dy + ball.getCenterY());
116        }
117      }
118    }
119  
120    class Ball extends Circle {
121      private double dx = 1, dy = 1;
122  
123      Ball(double x, double y, double radius, Color color) {
124        super(x, y, radius);
125        setFill(color); // Set ball color
126      }
127    }
128    
129    /**
130     * The main method is only needed for the IDE with limited
131     * JavaFX support. Not needed for running from the command line.
132     */
133    public static void main(String[] args) {
134      launch(args);
135    }
136  }
END END END

Test Que

 1  public class TestQueue {
  2    public static void main(String[] args) {
  3      java.util.Queue<String> queue = new java.util.LinkedList<>();
  4      queue.offer("Oklahoma");
  5      queue.offer("Indiana");
  6      queue.offer("Georgia");
  7      queue.offer("Texas");
  8  
  9      while (queue.size() > 0)
 10        System.out.print(queue.remove() + " ");
 11    }
 12  }

END END END 

Priority Que Demo

1  import java.util.*;
  2  
  3  public class PriorityQueueDemo {
  4    public static void main(String[] args) {
  5      PriorityQueue<String> queue1 = new PriorityQueue<>();
  6      queue1.offer("Oklahoma");
  7      queue1.offer("Indiana");
  8      queue1.offer("Georgia");
  9      queue1.offer("Texas");
 10  
 11      System.out.println("Priority queue using Comparable:");
 12      while (queue1.size() > 0) {
 13        System.out.print(queue1.remove() + " ");
 14      }
 15  
 16      PriorityQueue<String> queue2 = new PriorityQueue<>(
 17        4, Collections.reverseOrder());
 18      queue2.offer("Oklahoma");
 19      queue2.offer("Indiana");
 20      queue2.offer("Georgia");
 21      queue2.offer("Texas");
 22  
 23      System.out.println("\nPriority queue using Comparator:");
 24      while (queue2.size() > 0) {
 25        System.out.print(queue2.remove() + " ");
 26      }
 27    }
 28  }

END END END 

Evaluate Expression

1  import java.util.Stack;
  2  
  3  public class EvaluateExpression {
  4    public static void main(String[] args) {
  5      // Check number of arguments passed
  6      if (args.length != 1) {
  7        System.out.println(
  8          "Usage: java EvaluateExpression \"expression\"");
  9        System.exit(1);
 10      }
 11  
 12      try {
 13        System.out.println(evaluateExpression(args[0]));
 14      }
 15      catch (Exception ex) {
 16        System.out.println("Wrong expression: " + args[0]);
 17      }
 18    }
 19  
 20    /** Evaluate an expression */
 21    public static int evaluateExpression(String expression) {
 22      // Create operandStack to store operands
 23      Stack<Integer> operandStack = new Stack<>();
 24    
 25      // Create operatorStack to store operators
 26      Stack<Character> operatorStack = new Stack<>();
 27    
 28      // Insert blanks around (, ), +, -, /, and *
 29      expression = insertBlanks(expression);
 30  
 31      // Extract operands and operators
 32      String[] tokens = expression.split(" ");
 33  
 34      // Phase 1: Scan tokens
 35      for (String token: tokens) {
 36        if (token.length() == 0) // Blank space
 37          continue; // Back to the while loop to extract the next token
 38        else if (token.charAt(0) == '+' || token.charAt(0) == '-') {
 39          // Process all +, -, *, / in the top of the operator stack 
 40          while (!operatorStack.isEmpty() &&
 41            (operatorStack.peek() == '+' || 
 42             operatorStack.peek() == '-' ||
 43             operatorStack.peek() == '*' ||
 44             operatorStack.peek() == '/')) {
 45            processAnOperator(operandStack, operatorStack);
 46          }
 47  
 48          // Push the + or - operator into the operator stack
 49          operatorStack.push(token.charAt(0));
 50        }
 51        else if (token.charAt(0) == '*' || token.charAt(0) == '/') {
 52          // Process all *, / in the top of the operator stack 
 53          while (!operatorStack.isEmpty() &&
 54            (operatorStack.peek() == '*' ||
 55            operatorStack.peek() == '/')) {
 56            processAnOperator(operandStack, operatorStack);
 57          }
 58  
 59          // Push the * or / operator into the operator stack
 60          operatorStack.push(token.charAt(0));
 61        }
 62        else if (token.trim().charAt(0) == '(') {
 63          operatorStack.push('('); // Push '(' to stack
 64        }
 65        else if (token.trim().charAt(0) == ')') {
 66          // Process all the operators in the stack until seeing '('
 67          while (operatorStack.peek() != '(') {
 68            processAnOperator(operandStack, operatorStack);
 69          }
 70          
 71          operatorStack.pop(); // Pop the '(' symbol from the stack
 72        }
 73        else { // An operand scanned
 74          // Push an operand to the stack
 75          operandStack.push(new Integer(token));
 76        }
 77      }
 78  
 79      // Phase 2: process all the remaining operators in the stack 
 80      while (!operatorStack.isEmpty()) {
 81        processAnOperator(operandStack, operatorStack);
 82      }
 83  
 84      // Return the result
 85      return operandStack.pop();
 86    }
 87  
 88    /** Process one operator: Take an operator from operatorStack and
 89     *  apply it on the operands in the operandStack */
 90    public static void processAnOperator(
 91        Stack<Integer> operandStack, Stack<Character> operatorStack) {
 92      char op = operatorStack.pop();
 93      int op1 = operandStack.pop();
 94      int op2 = operandStack.pop();
 95      if (op == '+') 
 96        operandStack.push(op2 + op1);
 97      else if (op == '-') 
 98        operandStack.push(op2 - op1);
 99      else if (op == '*') 
100        operandStack.push(op2 * op1);
101      else if (op == '/') 
102        operandStack.push(op2 / op1);
103    }
104    
105    public static String insertBlanks(String s) {
106      String result = "";
107      
108      for (int i = 0; i < s.length(); i++) {
109        if (s.charAt(i) == '(' || s.charAt(i) == ')' || 
110            s.charAt(i) == '+' || s.charAt(i) == '-' ||
111            s.charAt(i) == '*' || s.charAt(i) == '/')
112          result += " " + s.charAt(i) + " ";
113        else
114          result += s.charAt(i);
115      }
116      
117      return result;
118    }
119  }
 11  }
 22  }    